{"version":3,"sources":["images/imgLogin.png","images/logo-wallet.png","actions/index.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","pages/Login.js","components/Header.js","components/AddExpense.js","components/TableExpenses.js","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getCurrencis","currencies","type","addExpense","expense","INITIAL_STATE","email","user","state","action","expenses","isLoading","edit","toEdit","wallet","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Login","props","password","disable","handleChange","bind","handleClick","target","name","value","this","setState","validInput","validEmail","RegExp","validPassword","test","login","className","src","imgLogin","alt","htmlFor","data-testid","id","onChange","to","onClick","disabled","React","Component","connect","dispatch","loginAction","Header","totalExpenses","length","reduce","acc","curr","Number","exchangeRates","currency","ask","toFixed","logo","AddExpense","editing","expenseToEdit","description","method","tag","handleAddButton","renderValueInput","renderDescriptionInput","renderCurrencyInput","renderPaymentInput","renderTagInput","renderAddButton","renderEditButton","handleEditButton","handleKeyDown","fetchCoins","event","keyCode","dispatchEditedExpenses","editedState","editedExpense","map","onKeyDown","maxLength","key","Math","random","payMethod","expenseTag","a","fetch","currenciesFetch","json","currenciesJSON","Object","keys","splice","exchangeRatesFetch","newExpenseToAdd","addNewExpense","editExpense","TableExpenses","renderTableBody","filter","deleteExpense","handleEdit","icon","faEdit","handleDelete","faTrashAlt","deletedExpense","editRequest","Wallet","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d183acb2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/imgLogin.938bb142.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-wallet.12c62714.png\";","export const LOGIN = 'LOGIN';\nexport const REQ_CURRENCIES = 'REQ_CURRENCIES';\nexport const GET_CURRENCIES = 'GET_CURRENCIES';\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\nexport const DELETED_EXPENSE = 'DELETE_EXPENSE';\nexport const EDITING_EXPENSE = 'EDITING_EXPENSE';\nexport const EDITED_EXPENSE = 'EDITED_EXPENSE';\n\nexport const loginAction = (email) => ({\n  type: LOGIN,\n  email,\n});\n\nconst requestCurrencies = () => ({\n  type: REQ_CURRENCIES,\n});\n\nconst getCurrencis = (currencies) => ({\n  type: GET_CURRENCIES,\n  currencies,\n});\n\nexport const fetchCurrencies = () => (\n  async (dispatch) => {\n    dispatch(requestCurrencies());\n    const currenciesFetch = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const currenciesJSON = await currenciesFetch.json();\n    const currencies = Object.keys(currenciesJSON);\n    currencies.splice(1, 1);\n    return dispatch(getCurrencis(currencies));\n  }\n);\n\nconst addExpense = (expense) => ({\n  type: ADD_EXPENSE,\n  expense,\n});\n\nexport const addNewExpense = (expense) => (\n  async (dispatch) => {\n    const exchangeRatesFetch = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const exchangeRates = await exchangeRatesFetch.json();\n    const newExpenseToAdd = {\n      ...expense,\n      exchangeRates,\n    };\n    return dispatch(addExpense(newExpenseToAdd));\n  }\n);\n\nexport const deletedExpense = (expenses) => ({\n  type: DELETED_EXPENSE,\n  expenses,\n});\n\nexport const editRequest = (expense) => ({\n  type: EDITING_EXPENSE,\n  expense,\n});\n\nexport const editExpense = (expenses) => ({\n  type: EDITED_EXPENSE,\n  expenses,\n});\n","import { LOGIN } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case LOGIN:\n    return {\n      ...state,\n      email: action.email,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","import { REQ_CURRENCIES,\n  GET_CURRENCIES,\n  ADD_EXPENSE,\n  DELETED_EXPENSE,\n  EDITING_EXPENSE,\n  EDITED_EXPENSE,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  isLoading: false,\n  edit: false,\n  toEdit: {},\n};\n\nconst wallet = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case REQ_CURRENCIES:\n    return {\n      ...state,\n      isLoading: true,\n    };\n  case GET_CURRENCIES:\n    return {\n      ...state,\n      currencies: action.currencies,\n      isLoading: false,\n    };\n  case ADD_EXPENSE:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.expense],\n    };\n  case DELETED_EXPENSE:\n    return {\n      ...state,\n      expenses: [...action.expenses],\n    };\n  case EDITING_EXPENSE:\n    return {\n      ...state,\n      edit: true,\n      toEdit: action.expense,\n    };\n  case EDITED_EXPENSE:\n    return {\n      ...state,\n      edit: false,\n      toEdit: {},\n      expenses: action.expenses,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { loginAction } from '../actions/index';\nimport './Login.css';\nimport imgLogin from '../images/imgLogin.png';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: '',\n      password: '',\n      disable: true,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    }, () => this.validInput());\n  }\n\n  validInput() {\n    const { email, password } = this.state;\n    const validEmail = new RegExp(/^[\\w.]+@[a-z]+.\\w{2,3}$/g);\n    const validPassword = new RegExp(/[\\w\\D]{6}/g);\n    if (validEmail.test(email) && validPassword.test(password)) {\n      this.setState({ disable: false });\n    } else this.setState({ disable: true });\n  }\n\n  handleClick() {\n    const { email } = this.state;\n    const { login } = this.props;\n    login(email);\n  }\n\n  render() {\n    const { disable, email, password } = this.state;\n    return (\n      <div className=\"Login\">\n        <img src={ imgLogin } alt=\"Wallet\" />\n        <h1>TrybeWallet</h1>\n        <h2>Login</h2>\n        <form className=\"form-login\">\n          <label htmlFor=\"email-input\">\n            Email:\n            <input\n              type=\"text\"\n              data-testid=\"email-input\"\n              id=\"email-input\"\n              name=\"email\"\n              value={ email }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <label htmlFor=\"password-input\">\n            Senha:\n            <input\n              type=\"password\"\n              data-testid=\"password-input\"\n              id=\"password-input\"\n              name=\"password\"\n              value={ password }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <Link to=\"/carteira\">\n            <button\n              type=\"button\"\n              onClick={ this.handleClick }\n              disabled={ disable }\n            >\n              Entrar\n            </button>\n          </Link>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  login: (email) => dispatch(loginAction(email)),\n});\n\nLogin.propTypes = {\n  login: PropTypes.objectOf(),\n}.isRequered;\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './Header.css';\nimport logo from '../images/logo-wallet.png';\n\nclass Header extends Component {\n  render() {\n    const { email, expenses } = this.props;\n    let totalExpenses = 0;\n    if (expenses.length > 0) {\n      totalExpenses = expenses\n        .reduce((acc, curr) => (acc\n          + (Number(curr.value)\n          * Number(curr.exchangeRates[curr.currency].ask))), 0).toFixed(2);\n    }\n    return (\n      <div className=\"Header\">\n        <div className=\"logo\">\n          <img src={ logo } alt=\"logo trybewallet\" />\n          <h1>TrybeWallet</h1>\n        </div>\n        <h3 data-testid=\"email-field\" className=\"email\">{ email }</h3>\n        <div className=\"currency\">\n          <h3 className=\"total\">\n            Despesas: R$\n            <p data-testid=\"total-field\">\n              { totalExpenses }\n            </p>\n          </h3>\n          <h5 data-testid=\"header-currency-field\">BRL</h5>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nHeader.propTypes = {\n  email: PropTypes.string,\n}.isRequered;\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchCurrencies, addNewExpense, editExpense } from '../actions';\nimport './AddExpense.css';\n\nclass AddExpense extends Component {\n  constructor(props) {\n    super(props);\n    const { editing, expenseToEdit } = this.props;\n    if (editing) { this.state = expenseToEdit; } else {\n      this.state = {\n        id: 0,\n        value: '',\n        description: '',\n        currency: 'USD',\n        method: 'Dinheiro',\n        tag: 'Alimentação',\n      };\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleAddButton = this.handleAddButton.bind(this);\n    this.renderValueInput = this.renderValueInput.bind(this);\n    this.renderDescriptionInput = this.renderDescriptionInput.bind(this);\n    this.renderCurrencyInput = this.renderCurrencyInput.bind(this);\n    this.renderPaymentInput = this.renderPaymentInput.bind(this);\n    this.renderTagInput = this.renderTagInput.bind(this);\n    this.renderAddButton = this.renderAddButton.bind(this);\n    this.renderEditButton = this.renderEditButton.bind(this);\n    this.handleEditButton = this.handleEditButton.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  componentDidMount() {\n    const { fetchCoins } = this.props;\n    fetchCoins();\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  handleAddButton() {\n    const { addExpense } = this.props;\n    addExpense(this.state);\n    this.setState((state) => ({ id: state.id + 1, value: '', description: '' }));\n  }\n\n  handleKeyDown(event) {\n    const enter = 13;\n    const { addExpense } = this.props;\n    if (event.keyCode === enter) {\n      addExpense(this.state);\n      this.setState((state) => ({ id: state.id + 1, value: '', description: '' }));\n    }\n  }\n\n  handleEditButton() {\n    const { expenses, dispatchEditedExpenses, expenseToEdit } = this.props;\n    const editedState = this.state;\n    const editedExpense = { ...expenseToEdit, ...editedState };\n    const editedExpenses = expenses.map((expense) => (\n      (expense.id === editedExpense.id)\n        ? { ...expense, ...editedExpense }\n        : { ...expense }\n    ));\n    dispatchEditedExpenses(editedExpenses);\n  }\n\n  renderValueInput() {\n    const { value } = this.state;\n    return (\n      <label htmlFor=\"value\">\n        Valor:\n        <input\n          type=\"number\"\n          id=\"value\"\n          data-testid=\"value-input\"\n          name=\"value\"\n          value={ value }\n          onChange={ this.handleChange }\n          onKeyDown={ this.handleKeyDown }\n        />\n      </label>\n    );\n  }\n\n  renderDescriptionInput() {\n    const { description } = this.state;\n    return (\n      <label htmlFor=\"description\">\n        Descrição:\n        <input\n          type=\"text\"\n          data-testid=\"description-input\"\n          id=\"description\"\n          name=\"description\"\n          value={ description }\n          onChange={ this.handleChange }\n          maxLength={ 30 }\n        />\n      </label>\n    );\n  }\n\n  renderCurrencyInput() {\n    const { currencies } = this.props;\n    const { currency } = this.state;\n    return (\n      <label htmlFor=\"currency\">\n        Moeda:\n        <select\n          data-testid=\"currency-input\"\n          name=\"currency\"\n          id=\"currency\"\n          value={ currency }\n          onChange={ this.handleChange }\n        >\n          {currencies.map((curr) => (\n            <option\n              data-testid={ curr }\n              value={ curr }\n              key={ Math.random() }\n            >\n              { curr }\n            </option>))}\n        </select>\n      </label>\n    );\n  }\n\n  renderPaymentInput() {\n    const paymentMethods = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\n    const { method } = this.state;\n    return (\n      <label htmlFor=\"method\">\n        Pagamento:\n        <select\n          data-testid=\"method-input\"\n          name=\"method\"\n          id=\"method\"\n          value={ method }\n          onChange={ this.handleChange }\n        >\n          {paymentMethods.map((payMethod) => (\n            <option\n              key={ Math.random() }\n            >\n              { payMethod }\n            </option>))}\n        </select>\n      </label>\n    );\n  }\n\n  renderTagInput() {\n    const expenseTags = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n    const { tag } = this.state;\n    return (\n      <label htmlFor=\"tag\">\n        Categoria:\n        <select\n          data-testid=\"tag-input\"\n          name=\"tag\"\n          id=\"tag\"\n          value={ tag }\n          onChange={ this.handleChange }\n        >\n          {expenseTags.map((expenseTag) => (\n            <option\n              key={ Math.random() }\n            >\n              { expenseTag }\n            </option>))}\n        </select>\n      </label>\n    );\n  }\n\n  renderAddButton() {\n    return (\n      <button\n        type=\"button\"\n        className=\"add-button\"\n        onClick={ this.handleAddButton }\n      >\n        Adicionar despesa\n      </button>\n    );\n  }\n\n  renderEditButton() {\n    return (\n      <button\n        type=\"button\"\n        data-testid=\"edit-btn\"\n        onClick={ this.handleEditButton }\n        className=\"edit-button\"\n      >\n        Editar despesa\n      </button>\n    );\n  }\n\n  render() {\n    const { isLoading, editing } = this.props;\n    if (isLoading) return <div>...Loading</div>;\n    return (\n      <form className=\"AddExpense\">\n        { this.renderValueInput() }\n        { this.renderDescriptionInput() }\n        { this.renderCurrencyInput() }\n        { this.renderPaymentInput() }\n        { this.renderTagInput() }\n        { !editing && this.renderAddButton() }\n        { editing && this.renderEditButton() }\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  isLoading: state.wallet.isLoading,\n  editing: state.wallet.edit,\n  expenseToEdit: state.wallet.toEdit,\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCoins: () => dispatch(fetchCurrencies()),\n  addExpense: (expense) => dispatch(addNewExpense(expense)),\n  dispatchEditedExpenses: (expenses) => dispatch(editExpense(expenses)),\n});\n\nAddExpense.propTypes = {\n  currencies: PropTypes.arrayOf(),\n  isLoading: PropTypes.string,\n  editing: PropTypes.boll,\n}.isRequered;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddExpense);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faEdit } from '@fortawesome/free-solid-svg-icons';\nimport { deletedExpense, editRequest } from '../actions';\nimport './TableExpenses.css';\n\nclass TableExpenses extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renderTableBody = this.renderTableBody.bind(this);\n  }\n\n  handleDelete(filter) {\n    const { expenses, deleteExpense } = this.props;\n    const filteredExpenses = expenses.filter((expense) => expense.id !== filter.id);\n    deleteExpense(filteredExpenses);\n  }\n\n  handleEdit(expense) {\n    const { expenseToEdit } = this.props;\n    expenseToEdit(expense);\n  }\n\n  renderTableBody() {\n    const { expenses, edit } = this.props;\n    return (\n      <tbody>\n        {expenses.map((expense) => (\n          <tr key={ Math.random() } className=\"table-body\">\n            <td>{expense.description || 'Sem descrição'}</td>\n            <td>{expense.tag}</td>\n            <td>{expense.method}</td>\n            <td>{Number(expense.value).toFixed(2) || '0.00'}</td>\n            <td>\n              {expense.exchangeRates[expense.currency].name}\n            </td>\n            <td>\n              {Number(expense.exchangeRates[expense.currency].ask).toFixed(2)}\n            </td>\n            <td>\n              {Number(expense.value\n                * expense.exchangeRates[expense.currency].ask).toFixed(2)}\n            </td>\n            <td>Real</td>\n            <td className=\"icons\">\n              <button\n                type=\"button\"\n                data-testid=\"edit-btn\"\n                onClick={ () => this.handleEdit(expense) }\n                disabled={ edit }\n              >\n                <FontAwesomeIcon\n                  icon={ faEdit }\n                  className=\"icon icon-edit\"\n                />\n              </button>\n              <button\n                type=\"button\"\n                data-testid=\"delete-btn\"\n                onClick={ () => this.handleDelete(expense) }\n                disabled={ edit }\n              >\n                <FontAwesomeIcon\n                  icon={ faTrashAlt }\n                  className=\"icon icon-delete\"\n                />\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    );\n  }\n\n  render() {\n    return (\n      <table className=\"TableExpenses\">\n        <thead className=\"table-head\">\n          <tr>\n            <th className=\"description\">Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Editar/Excluir</th>\n          </tr>\n        </thead>\n        {this.renderTableBody()}\n      </table>\n    );\n  }\n}\n\nconst mapStatetoProps = (state) => ({\n  expenses: state.wallet.expenses,\n  edit: state.wallet.edit,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteExpense: (expenses) => dispatch(deletedExpense(expenses)),\n  expenseToEdit: (expense) => dispatch(editRequest(expense)),\n});\n\nTableExpenses.propTypes = {\n  espenses: PropTypes.arrayOf(PropTypes.object),\n}.isRequered;\n\nexport default connect(mapStatetoProps, mapDispatchToProps)(TableExpenses);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport AddExpense from '../components/AddExpense';\nimport TableExpenses from '../components/TableExpenses';\n\nclass Wallet extends React.Component {\n  render() {\n    const { editing } = this.props;\n    return (\n      <>\n        <Header />\n        <AddExpense key={ editing } />\n        <TableExpenses />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  editing: state.wallet.edit,\n});\n\nWallet.propTypes = {\n  editing: PropTypes.boll,\n}.isRequered;\n\nexport default connect(mapStateToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/carteira\" component={ Wallet } />\n      <Route exact path=\"/\" component={ Login } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as BrowserRouter } from 'react-router-dom';\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}